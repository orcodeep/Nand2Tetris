// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // the output at a write cycle = prev value at that address where its writing now 
    // and all RAM chips already do this because they are made from registers 
    // which are made from bit chips. and a bit chip only gives the input of a cycle 
    // as output of the next cycle. so when we made Memory.hdl using RAM chips the output 
    // is taken care of internally. 

    // now how do i specify the range of address for a memory part ?? 
    // for every n bits u can make 2^(n) choices but u can only represent  
    // value upto 2^(n)-1 .. u can represent 16k with 14 bits. 16k registers 
    // mean 0 to 16383 and so 2^(14) - 1 = 16383. 
    // so UPPER limit of RAM16K is such that the 2 MSB's are = 0 and 
    // all else = 1. so if any register is located in RAM16K its address will never have 
    // the 2MSB = 1 ever. not any one of them. The permutations of the rest of the bits 
    // will make its address.

    // the UPPER limit of SCREEN 8k is such that the 15th and 13th bits are = 0 
    // and all else = 1. so if any register is located in SCREEN then the register's 
    // address will never have the 15th OR 13th bits = 1. But the 14th
    // bit will always be = 1 and along with it the permutations of the other 
    // bits will make the address of the register. 

    // and for the KBD the address only addresses that register if only and only the 
    // bits 14 and 13 = 1 and all else = 0. 






}