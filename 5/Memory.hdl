// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // the output at a write cycle = prev value at that address where its writing now 
    // and all RAM chips already do this because they are made from registers 
    // which are made from bit chips. and a bit chip only gives the input of a cycle 
    // as output of the next cycle. so when we made Memory.hdl using RAM chips the output 
    // is taken care of internally. 
    
    // now how do i specify the range of address for a memory part ?? 
    // for every n bits u can use it to make 2^(n) choices. 
    // and u can represent value upto 2^(n)-1 with n bits and 2^(14) = 16384.
    // but if u include zero then 16383 is max. 
    // so u can represent 16k with 14 bits. 16k registers mean 0 to 16383. 
    // so UPPER limit of RAM16K is such that the MSB is = 0 and 
    // all else = 1. so 2^(14)'s place = 0 always. 

    // the UPPER limit of SCREEN 8k is such that the 15th bit = 1
    // and 14th bit = 0. i.e 2^(13)'s place = 0 and 2^(14)'s place = 1 always 

    // and for the KBD the address only addresses that register if only and only the 
    // bits 14 and 13 = 1 and all else = 0. 

    //// load must only be passed to the correct chip part 

    // for ram:    14: 0, 13: 0 or 1
    // for screen: 14: 1, 13: 0 
    // for kbd:    14: 1, 13: 1

    // we have to figure out way to load properly else if loading is not correct 
    // multiple addresses which we didnt mean to write to may get written (loaded) 
    Not(in = address[14], out = ifloadram);
    Not(in = address[13], out = not13);
    And(a = address[14], b = not13, out = ifloadscreen); 

    Mux(a = false, b = load, sel = ifloadram, out = loadram);
    Mux(a = false, b = load, sel = ifloadscreen, out = loadscreen);

    RAM16K(in = in, load = loadram, address = address[0..13], out = ramout);
    Screen(in = in, load = loadscreen, address = address[0..12], out = scout);
    Keyboard(out = key);

    // select between 3 outputs based on 2 bits 
    Mux4Way16(a = ramout, b = ramout, c = scout, d = key, sel[1] = address[14], sel[0] = address[13], out = out);
}